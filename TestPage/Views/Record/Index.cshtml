@model TestPage.Models.BtModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section header{
    <!-- Top Navigation -->
    <div class="banner banner5">
        <div class="container">
            <h2>Ghi màn hình và webcam</h2>
        </div>
    </div>
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Đăng nhập</title>
    <link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet" type="text/css">
    <link href="../Content/AdminLTE.css" rel="stylesheet" type="text/css" />

    <script src="../Scripts/Record/RecordRTC.js"></script>
    <script src="../Scripts/Record/getScreenID.js"></script>
    <!-- for Edige/FF/Chrome/Opera/etc. getUserMedia support -->
    <script src="https://cdn.rawgit.com/webrtc/adapter/master/adapter.js"></script>
    <script>
        document.createElement('article');
        document.createElement('footer');
    </script>
</head>
<body class="bg-black">
    @{
        var session = (TestPage.Common.UserLogin)Session[TestPage.Common.CommonConstant.USER_SESSION];
    }
    <div class="form-box" id="login-box">
        <article>
            <section class="experiment">
                <p style="text-align:center;">
                    <video controls id="preview" style="border: 1px solid rgb(15, 158, 238); height: 270px; width: 360px;"></video>
                </p>
                <button id="record" class=" btn bg-blue flat btn-block">Quay webcam</button>
                <button id="stop" disabled class=" btn bg-blue flat btn-block">Dừng</button>
                @*<button id="delete" disabled>Delete your webm/wav files from Server</button>*@
                <div id="container" style="padding:1em 2em;"></div>
            </section>
        </article>

    
        <script>

            var recordWC = 'WC'+ @session.UserID + @DateTime.Now.Hour.ToString() + @DateTime.Now.Day.ToString() + @DateTime.Now.Month.ToString() + @DateTime.Now.Year.ToString()
            // PostBlob method uses XHR2 and FormData to submit 
            // recorded blob to the PHP server
            function PostBlob(blob, fileType, fileName) {
                // Tạo FormData và đưa file vào 
                var formData = new FormData();
                formData.append(fileType + '-filename', fileName);
                formData.append(fileType + '-blob', blob);
                // progress-bar
                var hr = document.createElement('hr');
                container.appendChild(hr);
                var strong = document.createElement('strong');
                strong.id = 'percentage';
                strong.innerHTML = fileType + ' tải lên: ';
                container.appendChild(strong);
                var progress = document.createElement('progress');
                container.appendChild(progress);
                // POST the Blob using XHR2
                xhr('/Record/PostRecordedAudioVideo', formData, progress, percentage, function (fName) {

                    var mediaElement = document.createElement(fileType);
                    var source = document.createElement('source');
                    source.src = location.href + 'uploads/' + fName.replace(/"/g, '');
                    if (fileType == 'video') source.type = 'video/webm; codecs="vp8, vorbis"';
                    if (fileType == 'audio') source.type = !!navigator.mozGetUserMedia ? 'audio/ogg' : 'audio/wav';
                });
            }
            var record = document.getElementById('record');
            var stop = document.getElementById('stop');
            var deleteFiles = document.getElementById('delete');
            var audio = document.querySelector('audio');
            var recordVideo = document.getElementById('record-video');
            var preview = document.getElementById('preview');
            var container = document.getElementById('container');
            // if you want to record only audio on chrome
            // then simply set "isFirefox=true"
            var isFirefox = !!navigator.mozGetUserMedia;
            var recordAudio, recordVideo;
            record.onclick = function () {
                record.disabled = true;
                navigator.getUserMedia({
                    audio: true,
                    video: true
                }, function (stream) {
                    preview.src = window.URL.createObjectURL(stream);
                    preview.play();
                    // var legalBufferValues = [256, 512, 1024, 2048, 4096, 8192, 16384];
                    // sample-rates in at least the range 22050 to 96000.
                    recordAudio = RecordRTC(stream, {
                        //bufferSize: 16384,
                        //sampleRate: 45000,
                        onAudioProcessStarted: function () {
                            if (!isFirefox) {
                                recordVideo.startRecording();
                            }
                        }
                    });
                    if (isFirefox) {
                        recordAudio.startRecording();
                    }
                    if (!isFirefox) {
                        recordVideo = RecordRTC(stream, {
                            type: 'video'
                        });
                        recordAudio.startRecording();
                    }
                    stop.disabled = false;
                }, function (error) {
                    alert(JSON.stringify(error, null, '\t'));
                });
            };
            var fileName;
            stop.onclick = function () {
                record.disabled = true;
                stop.disabled = true;
                preview.src = '';
                fileName = recordWC;
                if (!isFirefox) {
                    recordAudio.stopRecording(function () {
                        PostBlob(recordAudio.getBlob(), 'audio', fileName + '.wav');
                    });
                } else {
                    recordAudio.stopRecording(function (url) {
                        preview.src = url;
                        PostBlob(recordAudio.getBlob(), 'video', fileName + '.webm');
                    });
                }
                if (!isFirefox) {
                    recordVideo.stopRecording(function () {
                        PostBlob(recordVideo.getBlob(), 'video', fileName + '.webm');
                    });
                }
                deleteFiles.disabled = false;
            };
            deleteFiles.onclick = function () {
                deleteAudioVideoFiles();
            };
            function deleteAudioVideoFiles() {
                deleteFiles.disabled = true;
                if (!fileName) return;
                var formData = new FormData();
                formData.append('delete-file', fileName);
                xhr('/RecordRTC/DeleteFile', formData, null, null, function (response) {
                    console.log(response);
                });
                fileName = null;
                container.innerHTML = '';
            }
            function xhr(url, data, progress, percentage, callback) {
                var request = new XMLHttpRequest();
                request.onreadystatechange = function () {
                    if (request.readyState == 4 && request.status == 200) {
                        callback(request.responseText);
                    }
                };
                if (url.indexOf('/RecordRTC/DeleteFile') == -1) {
                    request.upload.onloadstart = function () {
                        percentage.innerHTML = 'Bắt đầu tải lên...';
                    };
                    request.upload.onprogress = function (event) {
                        progress.max = event.total;
                        progress.value = event.loaded;
                        percentage.innerHTML = 'Quá trình tải lên ' + Math.round(event.loaded / event.total * 100) + "%";
                    };
                    request.upload.onload = function () {
                        percentage.innerHTML = 'Xong! ';
                    };
                }
                request.open('POST', url);
                request.send(data);
            }
        </script>


        <article>
            <section class="experiment recordrtc">
                <h2>
                    <select class="recording-media" hidden>
                        <option value="record-screen">Screen</option>
                    </select>

                    <select class="media-container-format" hidden>
                        <option>WebM</option>
                    </select>

                    <select class="resolutionW" style="color:black">
                        <option>1280</option>
                        <option>1366</option>
                        <option>1920</option>
                    </select>
                    x
                    <select class="resolutionH" style="color:black">
                        <option>720</option>
                        <option>768</option>
                        <option>1080</option>
                    </select>

                    <button class=" btn bg-blue flat btn-block" id="recordscreen">Bắt đầu quay màn hình</button>
                </h2>

                <div style="text-align: center; display: none;">
                    <button id="save-to-disk" class=" btn bg-blue flat">Lưu vào máy</button>
                    @*<button id="open-new-tab" class=" btn bg-blue flat">Open New Tab</button>*@
                    <button id="upload-to-server" class=" btn bg-blue flat">Upload lên server</button>
                </div>

                <br>

                <video controls muted style="border: 1px solid rgb(15, 158, 238); height: 270px; width: 480px;"></video>
            </section>

            <section>
                <h2>Tiện ích để quay màn hình</h2>
                <ol>
                    <li>
                        Cài đặt tiện ích mở rộng trên Chrome <br />
                        <a href="https://chrome.google.com/webstore/detail/screen-capturing/ajhifddimkapgcifgcodmmfdlknahffk" target="_blank">Cửa hàng</a>
                        /
                        <button class="btn bg-blue flat" onclick="!!navigator.webkitGetUserMedia && !!window.chrome && !!chrome.webstore && !!chrome.webstore.install && chrome.webstore.install('https://chrome.google.com/webstore/detail/ajhifddimkapgcifgcodmmfdlknahffk', function() {location.reload();})" id="install-button" style="font-size:inherit; padding-bottom:0;">Nhấn để cài đặt</button>
                    </li>

                    <li>
                        Cài đặt tiện ích mở rộng trên Firefox <br /> <a href="https://addons.mozilla.org/en-US/firefox/addon/enable-screen-capturing/">Cửa hàng</a> / <button class="btn bg-blue flat" onclick="intallFirefoxScreenCapturingExtension(); this.disabled = true;" style="font-size:inherit; padding-bottom:0;">Nhấn để cài đặt</button>
                    </li>
                </ol>
            </section>
            <br />

            <script>
                (function () {
                    var params = {},
                        r = /([^&=]+)=?([^&]*)/g;

                    function d(s) {
                        return decodeURIComponent(s.replace(/\+/g, ' '));
                    }

                    var match, search = window.location.search;
                    while (match = r.exec(search.substring(1))) {
                        params[d(match[1])] = d(match[2]);

                        if (d(match[2]) === 'true' || d(match[2]) === 'false') {
                            params[d(match[1])] = d(match[2]) === 'true' ? true : false;
                        }
                    }

                    window.params = params;
                })();
            </script>

            <script>
                var recordingDIV = document.querySelector('.recordrtc');
                var recordingMedia = recordingDIV.querySelector('.recording-media');
                var recordingPlayer = recordingDIV.querySelector('video');
                var mediaContainerFormat = recordingDIV.querySelector('.media-container-format');


                var resW = document.querySelector('.resolutionW');
                var resH = document.querySelector('.resolutionH');


                recordingDIV.querySelector('button').onclick = function () {
                    var button = this;

                    if (button.innerHTML === 'Dừng quay màn hình') {
                        button.disabled = true;
                        button.disableStateWaiting = true;
                        setTimeout(function () {
                            button.disabled = false;
                            button.disableStateWaiting = false;
                        }, 2 * 1000);

                        button.innerHTML = 'Bắt đầu quay màn hình';

                        function stopStream() {
                            if (button.stream && button.stream.stop) {
                                button.stream.stop();
                                button.stream = null;
                            }
                        }

                        if (button.recordRTC) {
                            if (button.recordRTC.length) {
                                button.recordRTC[0].stopRecording(function (url) {
                                    if (!button.recordRTC[1]) {
                                        button.recordingEndedCallback(url);
                                        stopStream();

                                        saveToDiskOrOpenNewTab(button.recordRTC[0]);
                                        return;
                                    }

                                    button.recordRTC[1].stopRecording(function (url) {
                                        button.recordingEndedCallback(url);
                                        stopStream();
                                    });
                                });
                            }
                            else {
                                button.recordRTC.stopRecording(function (url) {
                                    button.recordingEndedCallback(url);
                                    stopStream();

                                    saveToDiskOrOpenNewTab(button.recordRTC);
                                });
                            }
                        }

                        return;
                    }

                    button.disabled = true;

                    var commonConfig = {
                        onMediaCaptured: function (stream) {
                            button.stream = stream;
                            if (button.mediaCapturedCallback) {
                                button.mediaCapturedCallback();
                            }

                            button.innerHTML = 'Dừng quay màn hình';
                            button.disabled = false;
                        },
                        onMediaStopped: function () {
                            button.innerHTML = 'Bắt đầu quay màn hình';

                            if (!button.disableStateWaiting) {
                                button.disabled = false;
                            }
                        },
                        onMediaCapturingFailed: function (error) {
                            if (error.name === 'PermissionDeniedError' && !!navigator.mozGetUserMedia) {
                                InstallTrigger.install({
                                    'Foo': {
                                        // https://addons.mozilla.org/firefox/downloads/latest/655146/addon-655146-latest.xpi?src=dp-btn-primary
                                        URL: 'https://addons.mozilla.org/en-US/firefox/addon/enable-screen-capturing/',
                                        toString: function () {
                                            return this.URL;
                                        }
                                    }
                                });
                            }

                            commonConfig.onMediaStopped();
                        }
                    };

                    if (recordingMedia.value === 'record-video') {
                        captureVideo(commonConfig);

                        button.mediaCapturedCallback = function () {
                            button.recordRTC = RecordRTC(button.stream, {
                                type: mediaContainerFormat.value === 'Gif' ? 'gif' : 'video',
                                disableLogs: params.disableLogs || false,
                                canvas: {
                                    width: params.canvas_width || 320,
                                    height: params.canvas_height || 240
                                },
                                frameInterval: typeof params.frameInterval !== 'undefined' ? parseInt(params.frameInterval) : 20 // minimum time between pushing frames to Whammy (in milliseconds)
                            });

                            button.recordingEndedCallback = function (url) {
                                recordingPlayer.src = null;
                                recordingPlayer.srcObject = null;

                                if (mediaContainerFormat.value === 'Gif') {
                                    recordingPlayer.pause();
                                    recordingPlayer.poster = url;

                                    recordingPlayer.onended = function () {
                                        recordingPlayer.pause();
                                        recordingPlayer.poster = URL.createObjectURL(button.recordRTC.blob);
                                    };
                                    return;
                                }

                                recordingPlayer.src = url;
                                recordingPlayer.play();

                                recordingPlayer.onended = function () {
                                    recordingPlayer.pause();
                                    recordingPlayer.src = URL.createObjectURL(button.recordRTC.blob);
                                };
                            };

                            button.recordRTC.startRecording();
                        };
                    }

                    if (recordingMedia.value === 'record-audio') {
                        captureAudio(commonConfig);

                        button.mediaCapturedCallback = function () {
                            button.recordRTC = RecordRTC(button.stream, {
                                type: 'audio',
                                bufferSize: typeof params.bufferSize == 'undefined' ? 0 : parseInt(params.bufferSize),
                                sampleRate: typeof params.sampleRate == 'undefined' ? 44100 : parseInt(params.sampleRate),
                                leftChannel: params.leftChannel || false,
                                disableLogs: params.disableLogs || false,
                                recorderType: webrtcDetectedBrowser === 'edge' ? StereoAudioRecorder : null
                            });

                            button.recordingEndedCallback = function (url) {
                                var audio = new Audio();
                                audio.src = url;
                                audio.controls = true;
                                recordingPlayer.parentNode.appendChild(document.createElement('hr'));
                                recordingPlayer.parentNode.appendChild(audio);

                                if (audio.paused) audio.play();

                                audio.onended = function () {
                                    audio.pause();
                                    audio.src = URL.createObjectURL(button.recordRTC.blob);
                                };
                            };

                            button.recordRTC.startRecording();
                        };
                    }

                    if (recordingMedia.value === 'record-audio-plus-video') {
                        captureAudioPlusVideo(commonConfig);

                        button.mediaCapturedCallback = function () {

                            if (webrtcDetectedBrowser !== 'firefox') { // opera or chrome etc.
                                button.recordRTC = [];

                                if (!params.bufferSize) {
                                    // it fixes audio issues whilst recording 720p
                                    params.bufferSize = 16384;
                                }

                                var audioRecorder = RecordRTC(button.stream, {
                                    type: 'audio',
                                    bufferSize: typeof params.bufferSize == 'undefined' ? 0 : parseInt(params.bufferSize),
                                    sampleRate: typeof params.sampleRate == 'undefined' ? 44100 : parseInt(params.sampleRate),
                                    leftChannel: params.leftChannel || false,
                                    disableLogs: params.disableLogs || false,
                                    recorderType: webrtcDetectedBrowser === 'edge' ? StereoAudioRecorder : null
                                });

                                var videoRecorder = RecordRTC(button.stream, {
                                    type: 'video',
                                    disableLogs: params.disableLogs || false,
                                    canvas: {
                                        width: params.canvas_width || 320,
                                        height: params.canvas_height || 240
                                    },
                                    frameInterval: typeof params.frameInterval !== 'undefined' ? parseInt(params.frameInterval) : 20 // minimum time between pushing frames to Whammy (in milliseconds)
                                });

                                // to sync audio/video playbacks in browser!
                                videoRecorder.initRecorder(function () {
                                    audioRecorder.initRecorder(function () {
                                        audioRecorder.startRecording();
                                        videoRecorder.startRecording();
                                    });
                                });

                                button.recordRTC.push(audioRecorder, videoRecorder);

                                button.recordingEndedCallback = function () {
                                    var audio = new Audio();
                                    audio.src = audioRecorder.toURL();
                                    audio.controls = true;
                                    audio.autoplay = true;

                                    audio.onloadedmetadata = function () {
                                        recordingPlayer.src = videoRecorder.toURL();
                                        recordingPlayer.play();
                                    };

                                    recordingPlayer.parentNode.appendChild(document.createElement('hr'));
                                    recordingPlayer.parentNode.appendChild(audio);

                                    if (audio.paused) audio.play();
                                };
                                return;
                            }

                            button.recordRTC = RecordRTC(button.stream, {
                                type: 'video',
                                disableLogs: params.disableLogs || false,
                                // we can't pass bitrates or framerates here
                                // Firefox MediaRecorder API lakes these features
                            });

                            button.recordingEndedCallback = function (url) {
                                recordingPlayer.srcObject = null;
                                recordingPlayer.muted = false;
                                recordingPlayer.src = url;
                                recordingPlayer.play();

                                recordingPlayer.onended = function () {
                                    recordingPlayer.pause();
                                    recordingPlayer.src = URL.createObjectURL(button.recordRTC.blob);
                                };
                            };

                            button.recordRTC.startRecording();
                        };
                    }

                    if (recordingMedia.value === 'record-screen') {
                        captureScreen(commonConfig);

                        button.mediaCapturedCallback = function () {
                            button.recordRTC = RecordRTC(button.stream, {
                                type: mediaContainerFormat.value === 'Gif' ? 'gif' : 'video',
                                disableLogs: params.disableLogs || false,
                                canvas: {
                                    width: params.canvas_width || resW.value,
                                    height: params.canvas_height || resH.value
                                }
                            });

                            button.recordingEndedCallback = function (url) {
                                recordingPlayer.src = null;
                                recordingPlayer.srcObject = null;

                                if (mediaContainerFormat.value === 'Gif') {
                                    recordingPlayer.pause();
                                    recordingPlayer.poster = url;
                                    recordingPlayer.onended = function () {
                                        recordingPlayer.pause();
                                        recordingPlayer.poster = URL.createObjectURL(button.recordRTC.blob);
                                    };
                                    return;
                                }

                                recordingPlayer.src = url;
                                recordingPlayer.play();
                            };

                            button.recordRTC.startRecording();
                        };
                    }

                    if (recordingMedia.value === 'record-audio-plus-screen') {
                        captureAudioPlusScreen(commonConfig);

                        button.mediaCapturedCallback = function () {
                            button.recordRTC = RecordRTC(button.stream, {
                                type: 'video',
                                disableLogs: params.disableLogs || false,
                                // we can't pass bitrates or framerates here
                                // Firefox MediaRecorder API lakes these features
                            });

                            button.recordingEndedCallback = function (url) {
                                recordingPlayer.srcObject = null;
                                recordingPlayer.muted = false;
                                recordingPlayer.src = url;
                                recordingPlayer.play();

                                recordingPlayer.onended = function () {
                                    recordingPlayer.pause();
                                    recordingPlayer.src = URL.createObjectURL(button.recordRTC.blob);
                                };
                            };

                            button.recordRTC.startRecording();
                        };
                    }
                };

                function captureVideo(config) {
                    captureUserMedia({ video: true }, function (videoStream) {
                        recordingPlayer.srcObject = videoStream;
                        recordingPlayer.play();

                        config.onMediaCaptured(videoStream);

                        videoStream.onended = function () {
                            config.onMediaStopped();
                        };
                    }, function (error) {
                        config.onMediaCapturingFailed(error);
                    });
                }

                function captureAudio(config) {
                    captureUserMedia({ audio: true }, function (audioStream) {
                        recordingPlayer.srcObject = audioStream;
                        recordingPlayer.play();

                        config.onMediaCaptured(audioStream);

                        audioStream.onended = function () {
                            config.onMediaStopped();
                        };
                    }, function (error) {
                        config.onMediaCapturingFailed(error);
                    });
                }

                function captureAudioPlusVideo(config) {
                    captureUserMedia({ video: true, audio: true }, function (audioVideoStream) {
                        recordingPlayer.srcObject = audioVideoStream;
                        recordingPlayer.play();

                        config.onMediaCaptured(audioVideoStream);

                        audioVideoStream.onended = function () {
                            config.onMediaStopped();
                        };
                    }, function (error) {
                        config.onMediaCapturingFailed(error);
                    });
                }

                function captureScreen(config) {
                    getScreenId(function (error, sourceId, screenConstraints) {
                        if (error === 'not-installed') {
                            document.write('<h1><a target="_blank" href="https://chrome.google.com/webstore/detail/screen-capturing/ajhifddimkapgcifgcodmmfdlknahffk">Cần cài đặt tiện ích mở rộng Screen Capturing. Nhấn vào liên kết để cài đặt và tải lại trang.</a></h1>');
                        }

                        if (error === 'permission-denied') {
                            alert('Yêu cầu chia sẻ màn hình bị từ chối.');
                        }

                        if (error === 'installed-disabled') {
                            alert('Hãy bật tiện ích mở rộng.');
                        }

                        if (error) {
                            config.onMediaCapturingFailed(error);
                            return;
                        }

                        captureUserMedia(screenConstraints, function (screenStream) {
                            recordingPlayer.srcObject = screenStream;
                            recordingPlayer.play();

                            config.onMediaCaptured(screenStream);

                            screenStream.onended = function () {
                                config.onMediaStopped();
                            };
                        }, function (error) {
                            config.onMediaCapturingFailed(error);
                        });
                    });
                }

                function captureAudioPlusScreen(config) {
                    getScreenId(function (error, sourceId, screenConstraints) {
                        if (error === 'not-installed') {
                            document.write('<h1><a target="_blank" href="https://chrome.google.com/webstore/detail/screen-capturing/ajhifddimkapgcifgcodmmfdlknahffk">Cần cài đặt tiện ích mở rộng Screen Capturing. Nhấn vào liên kết để cài đặt và tải lại trang.</a></h1>');
                        }

                        if (error === 'permission-denied') {
                            alert('Yêu cầu chia sẻ màn hình bị từ chối.');
                        }

                        if (error === 'installed-disabled') {
                            alert('Hãy bật tiện ích mở rộng.');
                        }

                        if (error) {
                            config.onMediaCapturingFailed(error);
                            return;
                        }

                        screenConstraints.audio = true;

                        captureUserMedia(screenConstraints, function (screenStream) {
                            recordingPlayer.srcObject = screenStream;
                            recordingPlayer.play();

                            config.onMediaCaptured(screenStream);

                            screenStream.onended = function () {
                                config.onMediaStopped();
                            };
                        }, function (error) {
                            config.onMediaCapturingFailed(error);
                        });
                    });
                }

                function captureUserMedia(mediaConstraints, successCallback, errorCallback) {
                    navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
                }

                function setMediaContainerFormat(arrayOfOptionsSupported) {
                    var options = Array.prototype.slice.call(
                        mediaContainerFormat.querySelectorAll('option')
                    );

                    var selectedItem;
                    options.forEach(function (option) {
                        option.disabled = true;

                        if (arrayOfOptionsSupported.indexOf(option.value) !== -1) {
                            option.disabled = false;

                            if (!selectedItem) {
                                option.selected = true;
                                selectedItem = option;
                            }
                        }
                    });
                }

                recordingMedia.onchange = function () {
                    if (this.value === 'record-audio') {
                        setMediaContainerFormat(['WAV', 'Ogg']);
                        return;
                    }
                    setMediaContainerFormat(['WebM', /*'Mp4',*/ 'Gif']);
                };

                if (webrtcDetectedBrowser === 'edge') {
                    // webp isn't supported in Microsoft Edge
                    // neither MediaRecorder API
                    // so lets disable both video/screen recording options

                    console.warn('Neither MediaRecorder API nor webp is supported in Microsoft Edge. You cam merely record audio.');

                    recordingMedia.innerHTML = '<option value="record-audio">Audio</option>';
                    setMediaContainerFormat(['WAV']);
                }

                if (webrtcDetectedBrowser === 'firefox') {
                    // Firefox implemented both MediaRecorder API as well as WebAudio API
                    // Their MediaRecorder implementation supports both audio/video recording in single container format
                    // Remember, we can't currently pass bit-rates or frame-rates values over MediaRecorder API (their implementation lakes these features)

                    recordingMedia.innerHTML = '<option value="record-audio-plus-video">Audio+Video</option>'
                                                + '<option value="record-audio-plus-screen">Audio+Screen</option>'
                                                + recordingMedia.innerHTML;
                }

                // disabling this option because currently this demo
                // doesn't supports publishing two blobs.
                // todo: add support of uploading both WAV/WebM to server.
                if (false && webrtcDetectedBrowser === 'chrome') {
                    recordingMedia.innerHTML = '<option value="record-audio-plus-video">Audio+Video</option>'
                                                + recordingMedia.innerHTML;
                    console.info('This RecordRTC demo merely tries to playback recorded audio/video sync inside the browser. It still generates two separate files (WAV/WebM).');
                }

                function saveToDiskOrOpenNewTab(recordRTC) {
                    recordingDIV.querySelector('#save-to-disk').parentNode.style.display = 'block';
                    recordingDIV.querySelector('#save-to-disk').onclick = function () {
                        if (!recordRTC) return alert('Không có bản ghi nào được tìm thấy.');

                        recordRTC.save();
                    };

                    //recordingDIV.querySelector('#open-new-tab').onclick = function () {
                    //    if (!recordRTC) return alert('No recording found.');

                    //    window.open(recordRTC.toURL());
                    //};

                    recordingDIV.querySelector('#upload-to-server').disabled = false;
                    recordingDIV.querySelector('#upload-to-server').onclick = function () {
                        if (!recordRTC) return alert('Không có bản ghi nào được tìm thấy.');
                        this.disabled = true;

                        var button = this;
                        uploadToServer(recordRTC, function (progress, fileURL) {
                            if (progress === 'ended') {
                                button.disabled = false;
                                button.innerHTML = 'Đã upload xong!';
                                button.onclick = function () {
                                    window.open(fileURL);
                                };
                                return;
                            }
                            button.innerHTML = progress;
                        });
                    };
                }

                var listOfFilesUploaded = [];

                var recordSC = 'SC'+ @session.UserID + @DateTime.Now.Hour.ToString() + @DateTime.Now.Day.ToString() + @DateTime.Now.Month.ToString() + @DateTime.Now.Year.ToString()

                function uploadToServer(recordRTC, callback) {
                    var blob = recordRTC instanceof Blob ? recordRTC : recordRTC.blob;
                    var fileType = blob.type.split('/')[0] || 'audio';
                    var fileName = recordSC.replace('.', '');

                    if (fileType === 'audio') {
                        fileName += '.' + (!!navigator.mozGetUserMedia ? 'ogg' : 'wav');
                    } else {
                        fileName += '.webm';
                    }

                    // create FormData
                    var formData = new FormData();
                    formData.append(fileType + '-filename', fileName);
                    formData.append(fileType + '-blob', blob);

                    callback('Uploading ' + fileType + ' recording to server.');

                    makeXMLHttpRequest('/Record/PostRecordedAudioVideo', formData, function (progress) {
                        if (progress !== 'upload-ended') {
                            callback(progress);
                            return;
                        }

                        var initialURL = location.href.replace(location.href.split('/').pop(), '') + 'uploads/';

                        callback('ended', initialURL + fileName);

                        // to make sure we can delete as soon as visitor leaves
                        listOfFilesUploaded.push(initialURL + fileName);
                    });
                }

                function makeXMLHttpRequest(url, data, callback) {
                    var request = new XMLHttpRequest();
                    request.onreadystatechange = function () {
                        if (request.readyState == 4 && request.status == 200) {
                            callback('upload-ended');
                        }
                    };

                    request.upload.onloadstart = function () {
                        callback('Đang bắt đầu upload...');
                    };

                    request.upload.onprogress = function (event) {
                        callback('Quá trình upload ' + Math.round(event.loaded / event.total * 100) + "%");
                    };

                    request.upload.onload = function () {
                        callback('progress-about-to-end');
                    };

                    request.upload.onload = function () {
                        callback('Tiến trình đã bị dừng lại');
                    };

                    request.upload.onerror = function (error) {
                        callback('Upload bị lỗi.');
                        console.error('XMLHttpRequest failed', error);
                    };

                    request.upload.onabort = function (error) {
                        callback('Upload đã bị dừng lại.');
                        console.error('XMLHttpRequest aborted', error);
                    };

                    request.open('POST', url);
                    request.send(data);
                }

                window.onbeforeunload = function () {
                    //recordingDIV.querySelector('button').disabled = false;
                    //recordingMedia.disabled = false;
                    //mediaContainerFormat.disabled = false;

                    //if (!listOfFilesUploaded.length) return;

                    //listOfFilesUploaded.forEach(function (fileURL) {
                    //    var request = new XMLHttpRequest();
                    //    request.onreadystatechange = function () {
                    //        if (request.readyState == 4 && request.status == 200) {
                    //            if (this.responseText === ' problem deleting files.') {
                    //                alert('Failed to delete ' + fileURL + ' from the server.');
                    //                return;
                    //            }

                    //            listOfFilesUploaded = [];
                    //            alert('You can leave now. Your files are removed from the server.');
                    //        }
                    //    };
                    //    request.open('POST', 'delete.php');

                    //    var formData = new FormData();
                    //    formData.append('delete-file', fileURL.split('/').pop());
                    //    request.send(formData);
                    //});

                    return 'Hãy chắc chắn rằng bạn đã tải video lên trước khi rời trang.';
                };
            </script>

        </article>
        @*<a href="/Record/Edit?id=@ViewBag.id">Sửa</a>*@
        @*<button onclick="edit()" class=" btn bg-blue flat">Nộp video</button>*@
     
    </div>
    <div class="col-md-8"></div>
    <div class="col-md-2"><button type="button" class=" btn bg-blue flat btn-block" id="layde" onclick="Layde()" disabled >Lấy đề thi</button>
    </div>

    <script>
        function edit() {
            window.open("../Record/Edit")
        }

        function Layde() {
            window.open("../Exam/Index")
        }

        $('#recordscreen').click(function () {
            if (this.id == 'recordscreen') {
                document.getElementById('layde').removeAttribute("disabled");
            }
        });
    </script>

   

    <br /><br /><br /><br />
</body>


</html>